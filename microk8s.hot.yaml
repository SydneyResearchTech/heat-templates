heat_template_version: 2018-08-31
description: microk8s cluster

parameters:
  availability_zone:
    type: string
    label: Availability Zone
    description: Availability Zone
    default: nova
  dns_domain:
    type: string
    label: DNS domain
    description: DNS domain
    default: sydney.edu.au
  dns_nameservers:
    type: comma_delimited_list
    label: DNS name servers
    description: A comma delimited list of name servers
    default: ["1.1.1.1","8.8.8.8"]
  flavor:
    type: string
    label: Instance type
    description: Image flavor to use for compute nodes
  image:
    type: string
    label: Image name
    description: Image name as server base
  key_name:
    type: string
    label: Key name
    description: Name of key-pair to be used for compute instance
  network:
    type: string
    label: existing network
    description: Existing network
    default: None
  network_cidr:
    type: string
    label: Network CIDR
    description: Overrides Subnet Pool assignment
    default: ""
  network_external:
    type: string
    label: External network
    description: ID or name of the external network
    default: None
  security_group_rules:
    type: json
    label: Firewall rules
    description: Additional firewall rules
    default: []
  server_count:
    type: number
    label: Node count
    description: Number of nodes to create
    default: 0
  subnet_host_routes:
    type: json
    label: static routes
    description: Static routes
    default: []
  subnet_pool:
    type: string
    label: IPAM subnet pool name
    description: Project subnet pool name for IP range to be allocated from
    default: None
  tags:
    type: json
    label: Tags
    description: Tags
    default: {}
  timezone:
    type: string
    label: TimeZone
    description: Deployment timezone
    default: Australia/Sydney
  volume_size: {type: number, default: 0}
  volume_type: {type: string, default: standard}

conditions:
  createNetwork: {equals: [{get_param: network}, 'None']}
  useSubnetCidr: {not: {equals: [{get_parm: network_cidr}, '']}}

resources:
  private_network:
    type: OS::Neutron::Net
    properties:
      name: {get_param: OS::stack_name}

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: {get_resource: private_network}
      dns_nameservers: {get_param: dns_nameservers}
      host_routes: {get_param: subnet_host_routes}
      name: {get_param: OS::stack_name}
      cidr: {get_param: network_cidr}
      #subnetpool: {get_param: subnet_pool}

  router:
    type: OS::Neutron::Router
    condition: createNetwork
    properties:
      admin_state_up: true
      external_gateway_info:
        network: {get_param: network_external}
      name: {get_param: OS::stack_name}

  router_if:
    type: OS::Neutron::RouterInterface
    condition: createNetwork
    properties:
      router: {get_resource: router}
      subnet: {get_resource: subnet}

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: "Default security rules"
      name: {get_param: OS::stack_name}
      rules:
        list_concat:
          - 
            - {direction: egress}
            - {direction: egress, ethertype: "IPv6"}
            - {remote_mode: remote_group_id}
            - {ethertype: IPv6, remote_mode: remote_group_id}
          - { get_param: security_group_rules}
        
  expose_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: "Generic external security rules"
      name: {list_join: ['-',[{ get_param: OS::stack_name }, "expose"]]}
      rules:
        - {port_range_max: 22, port_range_min: 22, protocol: tcp, remote_ip_prefix: "0.0.0.0/0"}

  servers:
    type: OS::Heat::ResourceGroup
    properties:
      count: {get_param: server_count}
      resource_def:
        type: OS::Custom::Server
        properties:
          availability_zone: {get_param: availability_zone}
          flavor: {get_param: flavor}
          floating_network: {get_param: network_external}
          image: {get_param: image}
          key_name: {get_param: key_name}
          metadata:
            map_merge:
              - {get_param: tags }
              - {"stack_name": {get_param: OS::stack_name}}
          name: {list_join: ['.',["n%index%", get_param: OS::stack_name, get_param: dns_domain]]}
          network: {if: [createNetwork, {get_resource: private_network}, {get_param: network}]}
          security_groups:
            - {get_resource: security_group}
            - {get_resource: expose_security_group}
          volume_size: {get_param: volume_size}
          volume_type: {get_param: volume_type}
